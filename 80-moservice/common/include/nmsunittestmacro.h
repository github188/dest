#ifndef NMS_UNIT_TEST_MACRO_H_
#define NMS_UNIT_TEST_MACRO_H_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


#include "kdvdef.h"
#include "eventid.h"

#define AID_UNIT_TEST_NMS           (AID_SVR_BGN + 4)

#define AID_UNITTEST_NMCSIM_AGENT   (AID_SVR_BGN + 5)
#define AID_UNITTEST_NMCSIM         (AID_SVR_BGN + 6)

#define AID_UNITTEST_MCUSIM         (AID_SVR_BGN + 7)
#define AID_UNITTEST_MTSIM          (AID_SVR_BGN + 8)

//单元测试消息号

//驱动模块与客户端桩模块之间
#define NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE         EV_TEST_SVR_BGN

#define NMSUNITTEST_TO_NMCSIMAGENT_CONNECT_CMD      (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 1)
#define NMSUNITTEST_TO_NMCSIMAGENT_DISCONNECT_CMD   (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 2)
#define NMSUNITTEST_TO_NMCSIMAGENT_CLT_REQ_CMD      (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 3)

#define NMSUNITTEST_TO_NMCSIMAGENT_START_CMLOOP_CMD (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 4)
#define NMSUNITTEST_TO_NMCSIMAGENT_STOP_CMLOOP_CMD  (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 5)
#define NMSUNITTEST_TO_NMCSIMAGENT_START_FMLOOP_CMD (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 6)
#define NMSUNITTEST_TO_NMCSIMAGENT_STOP_FMLOOP_CMD  (NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 7)
#define NMSUNITTEST_TO_NMCSIMAGENT_EXIT				(NMSUNITTEST_TO_NMCSIMAGENT_CMD_BASE + 50)

//客户端桩模块与Nms之间
#define NMCSIM_TO_NMS_UNITTEST_INI_CMD              EV_TEST_SVR_BGN + 30
#define NMCSIM_TO_NMS_START_CM_LOOP_CMD			    NMCSIM_TO_NMS_UNITTEST_INI_CMD + 1
#define NMCSIM_TO_NMS_STOP_CM_LOOP_CMD			    NMCSIM_TO_NMS_UNITTEST_INI_CMD + 2

#define NMCSIM_TO_NMS_START_FM_LOOP_CMD			    NMCSIM_TO_NMS_UNITTEST_INI_CMD + 3
#define NMCSIM_TO_NMS_STOP_FM_LOOP_CMD			    NMCSIM_TO_NMS_UNITTEST_INI_CMD + 4

//Mcu Sim
#define EV_MCU_AGT_REQ_RET			EV_TEST_AGT_BGN+1
#define EV_MCU_AGT_RESTART			EV_TEST_AGT_BGN+2
#define EV_MCU_AGT_STOP				EV_TEST_AGT_BGN+3
#define EV_MCU_AGT_STARTUP			EV_TEST_AGT_BGN+4
#define EV_MCU_AGT_GEN_ALARM		EV_TEST_AGT_BGN+5
#define EV_MCU_AGT_RES_ALARM		EV_TEST_AGT_BGN+6
#define EV_MCU_AGT_SET_VER			EV_TEST_AGT_BGN+7
#define EV_MCU_AGT_EXIT				EV_TEST_AGT_BGN+50

#define MCU_AGT_QUERY_VERSION			1
#define MCU_AGT_QUERY_ALARM_STAMP		2
#define MCU_AGT_QUERY_SYS_TIME			3
#define MCU_AGT_QUERY_FILE				4
#define MCU_AGT_QUERY_CMD_RET			5

#define CMD_RET_TRUE			1
#define CMD_RET_FALSE			2
#define CMD_RET_FALSE_TIMEOUT		3
#define CMD_RET_FALSE_MISMATCH		4

//Mt Sim
#define EV_MT_AGT_REQ_RET			EV_TEST_AGT_BGN+1
#define EV_MT_AGT_RESTART			EV_TEST_AGT_BGN+2
#define EV_MT_AGT_STOP				EV_TEST_AGT_BGN+3
#define EV_MT_AGT_STARTUP			EV_TEST_AGT_BGN+4
#define EV_MT_AGT_GEN_ALARM			EV_TEST_AGT_BGN+5
#define EV_MT_AGT_RES_ALARM			EV_TEST_AGT_BGN+6
#define EV_MT_AGT_SET_VER			EV_TEST_AGT_BGN+7
#define EV_MT_AGT_EXIT				EV_TEST_AGT_BGN+50

#define MT_AGT_QUERY_VERSION			1
#define MT_AGT_QUERY_ALARM_STAMP		2
#define MT_AGT_QUERY_SYS_TIME			3
#define MT_AGT_QUERY_FILE				4
#define MT_AGT_QUERY_CMD_RET			5

//驱动模块与Nms测试模块之间
#define NMSUNITTEST_TO_NMS_QUERY_BASE               (EV_TEST_SVR_BGN + 100)
#define NMSUNITTEST_TO_NMS_QUERY_CMD_RET            (NMSUNITTEST_TO_NMS_QUERY_BASE + 1)

//查询执行结果
typedef struct tagCmdRet
{
    tagCmdRet() : m_wCmdID(0), m_wCmdRet(0) {}
    u16 m_wCmdID;
    u16 m_wCmdRet;
} TCmdRet;

typedef struct tagAlarmInfo
{
    tagAlarmInfo()
    {
        ZeroMemory( this, sizeof (tagAlarmInfo) );
    }

    u32     m_dwAlarmCode;
    u8      m_byAlarmObjType;
    TCHAR   m_aszAlarmValue[16];
    BOOL32  m_bIsSend;
} TAlarmInfo;

#endif