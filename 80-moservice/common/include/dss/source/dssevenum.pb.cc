// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dssevenum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dssevenum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Dss {
namespace Event {

namespace {

const ::google::protobuf::EnumDescriptor* CltDssEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* iptype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DssObj_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecAlg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CarrierType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dssevenum_2eproto() {
  protobuf_AddDesc_dssevenum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dssevenum.proto");
  GOOGLE_CHECK(file != NULL);
  CltDssEvent_descriptor_ = file->enum_type(0);
  iptype_descriptor_ = file->enum_type(1);
  DssObj_descriptor_ = file->enum_type(2);
  DsType_descriptor_ = file->enum_type(3);
  SecMode_descriptor_ = file->enum_type(4);
  SecAlg_descriptor_ = file->enum_type(5);
  CarrierType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dssevenum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_dssevenum_2eproto() {
}

void protobuf_AddDesc_dssevenum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017dssevenum.proto\022\tDss.Event*\343\022\n\013CltDssE"
    "vent\022\033\n\027CLT_DSS_CREATCLIENT_REQ\020\001\022\033\n\027DSS"
    "_CLT_CREATCLIENT_ACK\020\002\022\034\n\030DSS_CLT_CREATC"
    "LIENT_NACK\020\003\022 \n\034CLT_DSS_SYNCAPPLYLANPORT"
    "_REQ\020\004\022 \n\034DSS_CLT_SYNCAPPLYLANPORT_ACK\020\005"
    "\022!\n\035DSS_CLT_SYNCAPPLYLANPORT_NACK\020\006\022 \n\034C"
    "LT_DSS_SYNCAPPLYWANPORT_REQ\020\007\022 \n\034DSS_CLT"
    "_SYNCAPPLYWANPORT_ACK\020\010\022!\n\035DSS_CLT_SYNCA"
    "PPLYWANPORT_NACK\020\t\022!\n\035CLT_DSS_ASYNCAPPLY"
    "LANPORT_REQ\020\n\022!\n\035DSS_CLT_ASYNCAPPLYLANPO"
    "RT_ACK\020\013\022\"\n\036DSS_CLT_ASYNCAPPLYLANPORT_NA"
    "CK\020\014\022!\n\035CLT_DSS_ASYNCAPPLYWANPORT_REQ\020\r\022"
    "!\n\035DSS_CLT_ASYNCAPPLYWANPORT_ACK\020\016\022\"\n\036DS"
    "S_CLT_ASYNCAPPLYWANPORT_NACK\020\017\022\033\n\027CLT_DS"
    "S_RELEASEPORT_CMD\020\020\022\031\n\025CLT_DSS_ADDSWITCH"
    "_REQ\020\021\022\031\n\025DSS_CLT_ADDSWITCH_ACK\020\022\022\032\n\026DSS"
    "_CLT_ADDSWITCH_NACK\020\023\022\036\n\032CLT_DSS_ADDM2ON"
    "ESWITCH_REQ\020\024\022\036\n\032DSS_CLT_ADDM2ONESWITCH_"
    "ACK\020\025\022\037\n\033DSS_CLT_ADDM2ONESWITCH_NACK\020\026\022\034"
    "\n\030CLT_DSS_ADDSRCSWITCH_REQ\020\027\022\034\n\030DSS_CLT_"
    "ADDSRCSWITCH_ACK\020\030\022\035\n\031DSS_CLT_ADDSRCSWIT"
    "CH_NACK\020\031\022\034\n\030CLT_DSS_REMOVESWITCH_CMD\020\032\022"
    "\027\n\023CLT_DSS_ADDDUMP_REQ\020\033\022\027\n\023DSS_CLT_ADDD"
    "UMP_ACK\020\034\022\030\n\024DSS_CLT_ADDDUMP_NACK\020\035\022\031\n\025C"
    "LT_DSS_REMOVDUMP_CMD\020\036\022\027\n\023DSS_CLT_SRVLOS"
    "T_NTF\020\037\022\035\n\031CLT_DSS_DESTROYCLIENT_CMD\020 \022\036"
    "\n\032CLT_DSS_ASYNCADDBRIDGE_REQ\020!\022\036\n\032DSS_CL"
    "T_ASYNCADDBRIDGE_ACK\020\"\022\037\n\033DSS_CLT_ASYNCA"
    "DDBRIDGE_NACK\020#\022\035\n\031CLT_DSS_SYNCADDBRIDGE"
    "_REQ\020$\022\035\n\031DSS_CLT_SYNCADDBRIDGE_ACK\020%\022\036\n"
    "\032DSS_CLT_SYNCADDBRIDGE_NACK\020&\022\034\n\030CLT_DSS"
    "_REMOVEBRIDGE_CMD\020\'\022\020\n\014DSS_CLT_PING\020(\022\020\n"
    "\014CLT_DSS_PONG\020)\022\034\n\030CLT_DSS_SENDTOBRIDGE_"
    "REQ\020*\022\034\n\030DSS_CLT_SENDTOBRIDGE_ACK\020+\022\035\n\031D"
    "SS_CLT_SENDTOBRIDGE_NACK\020,\022!\n\035CLT_DSS_RE"
    "CEIVEFROMBRIDGE_REQ\020-\022!\n\035DSS_CLT_RECEIVE"
    "FROMBRIDGE_ACK\020.\022\"\n\036DSS_CLT_RECEIVEFROMB"
    "RIDGE_NACK\020/\022 \n\034CLT_DSS_STOPSENDTOBRIDGE"
    "_CMD\0200\022%\n!CLT_DSS_STOPRECEIVEFROMBRIDGE_"
    "CMD\0201\022\033\n\027CLT_DSS_ALIVEDETECT_REQ\0202\022\033\n\027DS"
    "S_CLT_ALIVEDETECT_RSP\0203\022%\n!CLT_DSS_SYNCA"
    "TTACHLANIPOFPORT_REQ\0204\022%\n!DSS_CLT_SYNCAT"
    "TACHLANIPOFPORT_ACK\0205\022&\n\"DSS_CLT_SYNCATT"
    "ACHLANIPOFPORT_NACK\0206\022%\n!CLT_DSS_SYNCATT"
    "ACHWANIPOFPORT_REQ\0207\022%\n!DSS_CLT_SYNCATTA"
    "CHWANIPOFPORT_ACK\0208\022&\n\"DSS_CLT_SYNCATTAC"
    "HWANIPOFPORT_NACK\0209\022&\n\"CLT_DSS_ASYNCATTA"
    "CHLANIPOFPORT_REQ\020:\022&\n\"DSS_CLT_ASYNCATTA"
    "CHLANIPOFPORT_ACK\020;\022\'\n#DSS_CLT_ASYNCATTA"
    "CHLANIPOFPORT_NACK\020<\022&\n\"CLT_DSS_ASYNCATT"
    "ACHWANIPOFPORT_REQ\020=\022&\n\"DSS_CLT_ASYNCATT"
    "ACHWANIPOFPORT_ACK\020>\022\'\n#DSS_CLT_ASYNCATT"
    "ACHWANIPOFPORT_NACK\020\?\022\033\n\027DSS_CLT_SRVREGI"
    "STER_NTF\020@\022\"\n\036DSS_CLT_SYNCAPPLYLANPORT_R"
    "EPLY\020A\022#\n\037DSS_CLT_ASYNCAPPLYLANPORT_REPL"
    "Y\020B\022\"\n\036DSS_CLT_SYNCAPPLYWANPORT_REPLY\020C\022"
    "#\n\037DSS_CLT_ASYNCAPPLYWANPORT_REPLY\020D\022$\n "
    "CLT_DSS_SYNCAPPLYCONSLANPORT_REQ\020E\022&\n\"DS"
    "S_CLT_SYNCAPPLYCONSLANPORT_REPLY\020F\022%\n!CL"
    "T_DSS_ASYNCAPPLYCONSLANPORT_REQ\020G\022\'\n#DSS"
    "_CLT_ASYNCAPPLYCONSLANPORT_REPLY\020H*1\n\006ip"
    "type\022\021\n\rIpTypeUnknown\020\000\022\t\n\005eIpV4\020\001\022\t\n\005eI"
    "pV6\020\002*5\n\006DssObj\022\021\n\rDssObjUnknown\020\000\022\014\n\010DS"
    "S_CONF\020\001\022\n\n\006DSS_NU\020\002*2\n\006DsType\022\021\n\rDsType"
    "Unknown\020\000\022\t\n\005DSRTP\020\001\022\n\n\006DSRTCP\020\002*\210\001\n\007Sec"
    "Mode\022\021\n\rSEC_MODE_NONE\020\000\022\020\n\014SEC_MODE_ECB\020"
    "\001\022\020\n\014SEC_MODE_CBC\020\002\022\020\n\014SEC_MODE_CFB\020\003\022\020\n"
    "\014SEC_MODE_OFB\020\004\022\020\n\014SEC_MODE_MAC\020\005\022\020\n\014SEC"
    "_MODE_CTR\020\006*\204\002\n\006SecAlg\022\020\n\014SEC_ALG_NONE\020\000"
    "\022\017\n\013SEC_ALG_SM1\020\001\022\021\n\rSEC_ALG_SSF33\020\002\022\017\n\013"
    "SEC_ALG_SM4\020\003\022\017\n\013SEC_ALG_DES\020\004\022\017\n\013SEC_AL"
    "G_AES\020\005\022\020\n\014SEC_ALG_3DES\020\006\022\017\n\013SEC_ALG_RSA"
    "\020\007\022\021\n\rSEC_ALG_SM2_1\020\010\022\021\n\rSEC_ALG_SM2_2\020\t"
    "\022\021\n\rSEC_ALG_SM2_3\020\n\022\017\n\013SEC_ALG_SM3\020\013\022\020\n\014"
    "SEC_ALG_SHA1\020\014\022\022\n\016SEC_ALG_SHA256\020\r*T\n\013Ca"
    "rrierType\022\016\n\nCHINA_NONE\020\000\022\020\n\014CHINA_MOBIL"
    "E\020\001\022\020\n\014CHINA_UNICOM\020\002\022\021\n\rCHINA_TELECOM\020\003", 3080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dssevenum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dssevenum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dssevenum_2eproto {
  StaticDescriptorInitializer_dssevenum_2eproto() {
    protobuf_AddDesc_dssevenum_2eproto();
  }
} static_descriptor_initializer_dssevenum_2eproto_;
const ::google::protobuf::EnumDescriptor* CltDssEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltDssEvent_descriptor_;
}
bool CltDssEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iptype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iptype_descriptor_;
}
bool iptype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DssObj_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssObj_descriptor_;
}
bool DssObj_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DsType_descriptor_;
}
bool DsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecMode_descriptor_;
}
bool SecMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecAlg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecAlg_descriptor_;
}
bool SecAlg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CarrierType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierType_descriptor_;
}
bool CarrierType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Event
}  // namespace Dss

// @@protoc_insertion_point(global_scope)
