// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dssevstruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dssevstruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Dss {
namespace Event {

namespace {

const ::google::protobuf::Descriptor* DssMessageWrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssMessageWrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DssNetAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DssNetAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyLanPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyLanPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyWanPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyWanPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyLanPortReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyLanPortReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyWanPortReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyWanPortReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dssevstruct_2eproto() {
  protobuf_AddDesc_dssevstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dssevstruct.proto");
  GOOGLE_CHECK(file != NULL);
  DssMessageWrap_descriptor_ = file->message_type(0);
  static const int DssMessageWrap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssMessageWrap, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssMessageWrap, message_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssMessageWrap, context_),
  };
  DssMessageWrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssMessageWrap_descriptor_,
      DssMessageWrap::default_instance_,
      DssMessageWrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssMessageWrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssMessageWrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssMessageWrap));
  DssNetAddr_descriptor_ = file->message_type(1);
  static const int DssNetAddr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, ipmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, port_),
  };
  DssNetAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DssNetAddr_descriptor_,
      DssNetAddr::default_instance_,
      DssNetAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DssNetAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DssNetAddr));
  ApplyLanPort_descriptor_ = file->message_type(2);
  static const int ApplyLanPort_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPort, reqsubnet_),
  };
  ApplyLanPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyLanPort_descriptor_,
      ApplyLanPort::default_instance_,
      ApplyLanPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyLanPort));
  ApplyWanPort_descriptor_ = file->message_type(3);
  static const int ApplyWanPort_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPort, carriertype_),
  };
  ApplyWanPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyWanPort_descriptor_,
      ApplyWanPort::default_instance_,
      ApplyWanPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyWanPort));
  ApplyLanPortReply_descriptor_ = file->message_type(4);
  static const int ApplyLanPortReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPortReply, serverhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPortReply, portaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPortReply, reqsucceed_),
  };
  ApplyLanPortReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyLanPortReply_descriptor_,
      ApplyLanPortReply::default_instance_,
      ApplyLanPortReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPortReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyLanPortReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyLanPortReply));
  ApplyWanPortReply_descriptor_ = file->message_type(5);
  static const int ApplyWanPortReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, carriertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, serverhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, portaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, reqsucceed_),
  };
  ApplyWanPortReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyWanPortReply_descriptor_,
      ApplyWanPortReply::default_instance_,
      ApplyWanPortReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyWanPortReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyWanPortReply));
  SecretKey_descriptor_ = file->message_type(6);
  static const int SecretKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, keylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, algid_),
  };
  SecretKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretKey_descriptor_,
      SecretKey::default_instance_,
      SecretKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dssevstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssMessageWrap_descriptor_, &DssMessageWrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DssNetAddr_descriptor_, &DssNetAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyLanPort_descriptor_, &ApplyLanPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyWanPort_descriptor_, &ApplyWanPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyLanPortReply_descriptor_, &ApplyLanPortReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyWanPortReply_descriptor_, &ApplyWanPortReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretKey_descriptor_, &SecretKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dssevstruct_2eproto() {
  delete DssMessageWrap::default_instance_;
  delete DssMessageWrap_reflection_;
  delete DssNetAddr::default_instance_;
  delete DssNetAddr_reflection_;
  delete ApplyLanPort::default_instance_;
  delete ApplyLanPort_reflection_;
  delete ApplyWanPort::default_instance_;
  delete ApplyWanPort_reflection_;
  delete ApplyLanPortReply::default_instance_;
  delete ApplyLanPortReply_reflection_;
  delete ApplyWanPortReply::default_instance_;
  delete ApplyWanPortReply_reflection_;
  delete SecretKey::default_instance_;
  delete SecretKey_reflection_;
}

void protobuf_AddDesc_dssevstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Dss::Event::protobuf_AddDesc_dssevenum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021dssevstruct.proto\022\tDss.Event\032\017dssevenu"
    "m.proto\"^\n\016DssMessageWrap\022%\n\005event\030\001 \001(\016"
    "2\026.Dss.Event.CltDssEvent\022\024\n\014message_body"
    "\030\002 \001(\014\022\017\n\007context\030\003 \001(\014\"[\n\nDssNetAddr\022\016\n"
    "\006IpAddr\030\001 \001(\t\022\016\n\006IpMask\030\002 \001(\t\022\037\n\004Type\030\003 "
    "\001(\0162\021.Dss.Event.iptype\022\014\n\004Port\030\004 \001(\r\"8\n\014"
    "ApplyLanPort\022(\n\treqSubnet\030\001 \001(\0132\025.Dss.Ev"
    "ent.DssNetAddr\";\n\014ApplyWanPort\022+\n\013carrie"
    "rtype\030\001 \001(\0162\026.Dss.Event.CarrierType\"f\n\021A"
    "pplyLanPortReply\022\024\n\014ServerHandle\030\001 \001(\r\022\'"
    "\n\010portAddr\030\002 \001(\0132\025.Dss.Event.DssNetAddr\022"
    "\022\n\nreqSucceed\030\003 \001(\010\"\223\001\n\021ApplyWanPortRepl"
    "y\022+\n\013carriertype\030\001 \001(\0162\026.Dss.Event.Carri"
    "erType\022\024\n\014ServerHandle\030\002 \001(\r\022\'\n\010portAddr"
    "\030\003 \001(\0132\025.Dss.Event.DssNetAddr\022\022\n\nreqSucc"
    "eed\030\004 \001(\010\"n\n\tSecretKey\022\013\n\003key\030\001 \001(\014\022\016\n\006k"
    "eylen\030\002 \001(\r\022\"\n\006ModeID\030\003 \001(\0162\022.Dss.Event."
    "SecMode\022 \n\005AlgID\030\004 \001(\0162\021.Dss.Event.SecAl"
    "gB\002H\002P\000", 727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dssevstruct.proto", &protobuf_RegisterTypes);
  DssMessageWrap::default_instance_ = new DssMessageWrap();
  DssNetAddr::default_instance_ = new DssNetAddr();
  ApplyLanPort::default_instance_ = new ApplyLanPort();
  ApplyWanPort::default_instance_ = new ApplyWanPort();
  ApplyLanPortReply::default_instance_ = new ApplyLanPortReply();
  ApplyWanPortReply::default_instance_ = new ApplyWanPortReply();
  SecretKey::default_instance_ = new SecretKey();
  DssMessageWrap::default_instance_->InitAsDefaultInstance();
  DssNetAddr::default_instance_->InitAsDefaultInstance();
  ApplyLanPort::default_instance_->InitAsDefaultInstance();
  ApplyWanPort::default_instance_->InitAsDefaultInstance();
  ApplyLanPortReply::default_instance_->InitAsDefaultInstance();
  ApplyWanPortReply::default_instance_->InitAsDefaultInstance();
  SecretKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dssevstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dssevstruct_2eproto {
  StaticDescriptorInitializer_dssevstruct_2eproto() {
    protobuf_AddDesc_dssevstruct_2eproto();
  }
} static_descriptor_initializer_dssevstruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DssMessageWrap::kEventFieldNumber;
const int DssMessageWrap::kMessageBodyFieldNumber;
const int DssMessageWrap::kContextFieldNumber;
#endif  // !_MSC_VER

DssMessageWrap::DssMessageWrap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DssMessageWrap::InitAsDefaultInstance() {
}

DssMessageWrap::DssMessageWrap(const DssMessageWrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DssMessageWrap::SharedCtor() {
  _cached_size_ = 0;
  event_ = 1;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssMessageWrap::~DssMessageWrap() {
  SharedDtor();
}

void DssMessageWrap::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void DssMessageWrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssMessageWrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssMessageWrap_descriptor_;
}

const DssMessageWrap& DssMessageWrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

DssMessageWrap* DssMessageWrap::default_instance_ = NULL;

DssMessageWrap* DssMessageWrap::New() const {
  return new DssMessageWrap;
}

void DssMessageWrap::Swap(DssMessageWrap* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata DssMessageWrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssMessageWrap_descriptor_;
  metadata.reflection = DssMessageWrap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DssNetAddr::kIpAddrFieldNumber;
const int DssNetAddr::kIpMaskFieldNumber;
const int DssNetAddr::kTypeFieldNumber;
const int DssNetAddr::kPortFieldNumber;
#endif  // !_MSC_VER

DssNetAddr::DssNetAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DssNetAddr::InitAsDefaultInstance() {
}

DssNetAddr::DssNetAddr(const DssNetAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DssNetAddr::SharedCtor() {
  _cached_size_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipmask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DssNetAddr::~DssNetAddr() {
  SharedDtor();
}

void DssNetAddr::SharedDtor() {
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (ipmask_ != &::google::protobuf::internal::kEmptyString) {
    delete ipmask_;
  }
  if (this != default_instance_) {
  }
}

void DssNetAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DssNetAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DssNetAddr_descriptor_;
}

const DssNetAddr& DssNetAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

DssNetAddr* DssNetAddr::default_instance_ = NULL;

DssNetAddr* DssNetAddr::New() const {
  return new DssNetAddr;
}

void DssNetAddr::Swap(DssNetAddr* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata DssNetAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DssNetAddr_descriptor_;
  metadata.reflection = DssNetAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyLanPort::kReqSubnetFieldNumber;
#endif  // !_MSC_VER

ApplyLanPort::ApplyLanPort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyLanPort::InitAsDefaultInstance() {
  reqsubnet_ = const_cast< ::Dss::Event::DssNetAddr*>(&::Dss::Event::DssNetAddr::default_instance());
}

ApplyLanPort::ApplyLanPort(const ApplyLanPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyLanPort::SharedCtor() {
  _cached_size_ = 0;
  reqsubnet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyLanPort::~ApplyLanPort() {
  SharedDtor();
}

void ApplyLanPort::SharedDtor() {
  if (this != default_instance_) {
    delete reqsubnet_;
  }
}

void ApplyLanPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyLanPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyLanPort_descriptor_;
}

const ApplyLanPort& ApplyLanPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

ApplyLanPort* ApplyLanPort::default_instance_ = NULL;

ApplyLanPort* ApplyLanPort::New() const {
  return new ApplyLanPort;
}

void ApplyLanPort::Swap(ApplyLanPort* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ApplyLanPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyLanPort_descriptor_;
  metadata.reflection = ApplyLanPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyWanPort::kCarriertypeFieldNumber;
#endif  // !_MSC_VER

ApplyWanPort::ApplyWanPort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyWanPort::InitAsDefaultInstance() {
}

ApplyWanPort::ApplyWanPort(const ApplyWanPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyWanPort::SharedCtor() {
  _cached_size_ = 0;
  carriertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyWanPort::~ApplyWanPort() {
  SharedDtor();
}

void ApplyWanPort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyWanPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyWanPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyWanPort_descriptor_;
}

const ApplyWanPort& ApplyWanPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

ApplyWanPort* ApplyWanPort::default_instance_ = NULL;

ApplyWanPort* ApplyWanPort::New() const {
  return new ApplyWanPort;
}

void ApplyWanPort::Swap(ApplyWanPort* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ApplyWanPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyWanPort_descriptor_;
  metadata.reflection = ApplyWanPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyLanPortReply::kServerHandleFieldNumber;
const int ApplyLanPortReply::kPortAddrFieldNumber;
const int ApplyLanPortReply::kReqSucceedFieldNumber;
#endif  // !_MSC_VER

ApplyLanPortReply::ApplyLanPortReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyLanPortReply::InitAsDefaultInstance() {
  portaddr_ = const_cast< ::Dss::Event::DssNetAddr*>(&::Dss::Event::DssNetAddr::default_instance());
}

ApplyLanPortReply::ApplyLanPortReply(const ApplyLanPortReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyLanPortReply::SharedCtor() {
  _cached_size_ = 0;
  serverhandle_ = 0u;
  portaddr_ = NULL;
  reqsucceed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyLanPortReply::~ApplyLanPortReply() {
  SharedDtor();
}

void ApplyLanPortReply::SharedDtor() {
  if (this != default_instance_) {
    delete portaddr_;
  }
}

void ApplyLanPortReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyLanPortReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyLanPortReply_descriptor_;
}

const ApplyLanPortReply& ApplyLanPortReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

ApplyLanPortReply* ApplyLanPortReply::default_instance_ = NULL;

ApplyLanPortReply* ApplyLanPortReply::New() const {
  return new ApplyLanPortReply;
}

void ApplyLanPortReply::Swap(ApplyLanPortReply* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ApplyLanPortReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyLanPortReply_descriptor_;
  metadata.reflection = ApplyLanPortReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyWanPortReply::kCarriertypeFieldNumber;
const int ApplyWanPortReply::kServerHandleFieldNumber;
const int ApplyWanPortReply::kPortAddrFieldNumber;
const int ApplyWanPortReply::kReqSucceedFieldNumber;
#endif  // !_MSC_VER

ApplyWanPortReply::ApplyWanPortReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyWanPortReply::InitAsDefaultInstance() {
  portaddr_ = const_cast< ::Dss::Event::DssNetAddr*>(&::Dss::Event::DssNetAddr::default_instance());
}

ApplyWanPortReply::ApplyWanPortReply(const ApplyWanPortReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyWanPortReply::SharedCtor() {
  _cached_size_ = 0;
  carriertype_ = 0;
  serverhandle_ = 0u;
  portaddr_ = NULL;
  reqsucceed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyWanPortReply::~ApplyWanPortReply() {
  SharedDtor();
}

void ApplyWanPortReply::SharedDtor() {
  if (this != default_instance_) {
    delete portaddr_;
  }
}

void ApplyWanPortReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyWanPortReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyWanPortReply_descriptor_;
}

const ApplyWanPortReply& ApplyWanPortReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

ApplyWanPortReply* ApplyWanPortReply::default_instance_ = NULL;

ApplyWanPortReply* ApplyWanPortReply::New() const {
  return new ApplyWanPortReply;
}

void ApplyWanPortReply::Swap(ApplyWanPortReply* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ApplyWanPortReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyWanPortReply_descriptor_;
  metadata.reflection = ApplyWanPortReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretKey::kKeyFieldNumber;
const int SecretKey::kKeylenFieldNumber;
const int SecretKey::kModeIDFieldNumber;
const int SecretKey::kAlgIDFieldNumber;
#endif  // !_MSC_VER

SecretKey::SecretKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecretKey::InitAsDefaultInstance() {
}

SecretKey::SecretKey(const SecretKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecretKey::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylen_ = 0u;
  modeid_ = 0;
  algid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretKey::~SecretKey() {
  SharedDtor();
}

void SecretKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SecretKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretKey_descriptor_;
}

const SecretKey& SecretKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dssevstruct_2eproto();
  return *default_instance_;
}

SecretKey* SecretKey::default_instance_ = NULL;

SecretKey* SecretKey::New() const {
  return new SecretKey;
}

void SecretKey::Swap(SecretKey* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SecretKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretKey_descriptor_;
  metadata.reflection = SecretKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Event
}  // namespace Dss

// @@protoc_insertion_point(global_scope)
