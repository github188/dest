 /*****************************************************************************
   模块名      : KDVMT agent
   文件名      : mtagent.h
   相关文件    : mtagent.cpp
   文件实现功能: KDVMT 代理基类头文件
   作者        : 李屹
   版本        : V0.9  Copyright(C) 2001-2002 KDC, All rights reserved.
-----------------------------------------------------------------------------
   修改记录:
   日  期      版本        修改人      修改内容
   2002/02/19  0.9         李屹        创建
   2002/07/29  1.0         李屹        新方案调整
   2003/06/20  1.1		   jianghy	   方案调整
   2003/11/05  3.0         jianghy     3.0实现
******************************************************************************/

// mtagent.h: interface for the CMtAgent class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_MTAGENT_H__E7FBF7B5_F532_4778_98CF_6649D58F5914__INCLUDED_)
#define AFX_MTAGENT_H__E7FBF7B5_F532_4778_98CF_6649D58F5914__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "osp.h"
#include "kdvsys.h"
#include "mtstruc.h"
#include "agtcomm.h"

#ifdef __cplusplus
extern "C" {
#endif
extern STRUCT_mtSystem_mem					g_tmtSystem;
extern STRUCT_mtNetwork_mem					g_tmtNetwork;
extern STRUCT_mtLocalInfo_mem				g_tmtLocalInfo;
extern STRUCT_mtnetTrapRcvEntry_mem		  **g_pptmtnetTrapRcvTable;
extern u32									g_dwmtnetTrapRcvEntryNum;
extern STRUCT_mtnetEthernetCardEntry_mem	  **g_pptmtnetEthernetCardTable;
extern u32									g_dwmtnetEthernetCardEntryNum;
extern STRUCT_mteqpCameraEntry_mem			  **g_pptmteqpCameraTable;
extern u32									g_dwmteqpCameraEntryNum;
extern STRUCT_mteqpMatrixEntry_mem			  **g_pptmteqpMatrixTable;
extern u32									g_dwmteqpMatrixEntryNum;
extern STRUCT_mteqpNetEncoder_mem				g_tmteqpNetEncoder;
extern STRUCT_mtVideo_mem						g_tmtVideoConfig;
extern STRUCT_mtAudio_mem						g_tmtAudioConfig;
extern STRUCT_mtPerformance					g_tmtPerformance;
extern STRUCT_mtpfmAlarmEntry_mem				g_atmtpfmAlarmTable[MAXNUM_MT_ALARM];
extern u32									g_dwmtpfmAlarmTableMaxNo;
extern STRUCT_mtDisplayOption_mem					g_tmtDisplayOption;
extern STRUCT_mtCallConfig_mem					g_tmtCallConfig;
void QuitMtAgent( void );
void MtAgentVersion(void);
void mtUpdateEncoderStatistics( STRUCT_mtpfmEncoderStatistics* pstStatistics );
void mtUpdateDecoderStatistics( STRUCT_mtpfmDecoderStatistics* pstStatistics );
void InitAgent( void );
void QuitMtAgent( void );
#ifdef __cplusplus
}
#endif

extern "C" SEMHANDLE   g_semAllConfig;
extern "C" SEMHANDLE   g_semAlarmTable;

class CMtAgent  
{
public:
	/*====================================================================
	功能：获取终端别名
	参数：LPSTR lpszAlias, Alias字符串指针，内存需用户申请
		  u16  wBufSize, Alias字符串缓冲区大小，若小于实际长度返回字符串予以截断
	返回值：成功返回TRUE，反之FALSE
    ====================================================================*/
	BOOL GetAlias( LPSTR lpszAlias, u16  wBufSize ) const;

	/*====================================================================
	功能：设置终端别名
	参数：LPSTR lpszAlias, Alias字符串指针
	返回值：成功返回TRUE，反之FALSE
    ====================================================================*/
	BOOL SetAlias( LPSTR lpszAlias );

	
	/*====================================================================
	功能：获取终端E164号码
	参数：LPSTR lpszNumber, E164号码字符串指针，内存需用户申请
          u16  wBufSize, E164号码字符串缓冲区大小，若小于实际长度返回字符串予以截断
	返回值：成功返回TRUE，反之FALSE
    ====================================================================*/
	BOOL GetE164Number( LPSTR lpszNumber, u16  wBufSize ) const;

	/*====================================================================
	功能：设置终端E164号码
	参数：LPSTR lpszNumber, E164号码字符串指针
	返回值：成功返回TRUE，反之FALSE
    ====================================================================*/
	BOOL SetE164Number( LPSTR lpszNumber );


	/*====================================================================
	功能：获取终端类型
	参数：无 
	返回值：1：接收且发送；2：只接收；3：只发送    0表示失败
    ====================================================================*/
	UCHAR  GetMtType( ) const;

	/*====================================================================
	功能：设置终端类型
	参数：UCHAR  byType：取值范围： 1：接收且发送；2：只接收；3：只发送
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetMtType( UCHAR byType );


	/*====================================================================
	功能：获取终端地位
	参数：无 
	返回值：1：主; 2:旁听    0表示失败
    ====================================================================*/
	UCHAR  GetMtPosition( ) const;

	/*====================================================================
	功能：设置终端地位
	参数：UCHAR  byPosition：取值范围： 1：主; 2:旁听
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetMtPosition( UCHAR byPosition );



	/*====================================================================
	功能：获取业务使用的IP地址
	参数：无 
	返回值： 业务使用的IP地址（网络序）。  0表示失败
    ====================================================================*/
	u32  GetVcIpAddr( ) const;


	/*====================================================================
	功能：设置业务使用的IP地址
	参数：DWORD  dwIpAddr： IP地址（网络序） 
          UCHAR byIndex ：网卡号
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetVcIpAddr( u32 dwIpAddr, UCHAR byIndex );


	/*====================================================================
	功能：获取网关IP地址
	参数：无 
	返回值： 网关IP地址（网络序）。  0表示失败
    ====================================================================*/
	u32  GetGwIpAddr( ) const;

	/*====================================================================
	功能：设置网关IP地址
	参数：DWORD  dwIpAddr： IP地址（网络序） 
          UCHAR byIndex ：  网卡号
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetGwIpAddr( u32 dwIpAddr, UCHAR byIndex );


	/*====================================================================
	功能：获取网守IP地址
	参数：无 
	返回值： 网守IP地址（网络序）。  0表示失败
    ====================================================================*/
	u32  GetGKIpAddr( ) const;

	/*====================================================================
	功能：设置网守IP地址
	参数：DWORD  dwIpAddr：IP地址（网络序） 
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetGKIpAddr( u32 dwIpAddr );


	/*====================================================================
	功能：获取发送峰值带宽
	参数：无 
	返回值： 发送峰值带宽。  0表示失败
    ====================================================================*/
	u32  GetBandwidth( ) const;

	/*====================================================================
	功能：设置发送峰值带宽
	参数：DWORD  dwBandwidth：带宽值 
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetBandwidth( u32 dwBandwidth );


	/*====================================================================
	功能：获取接收起始端口号
	参数：无 
	返回值： 接收起始端口号。  0表示失败    
	====================================================================*/
	u16   GetReceiveStartPort( ) const;

	/*====================================================================
	功能：设置接收起始端口号
	参数：WORD  wPort：端口值 
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL SetReceiveStartPort( u16  wPort );

	
	/*====================================================================
	功能：获取发送起始端口号
	参数：无 
	返回值： 发送起始端口号。  0表示失败
	====================================================================*/
	u16   GetSendStartPort( ) const;

	/*====================================================================
	功能：设置发送起始端口号
	参数：WORD  wPort：端口值 
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetSendStartPort( u16  wPort );

	
	/*====================================================================
	功能：获取TRAP服务器信息
	参数：STRUCT_mtnetTrapRcvEntry_mem *ptEntry：返回TRAP服务器信息
          UCHAR byEntryNum ：TRAP服务器结构个数
	返回值： 实际取得的TRAP服务器结构个数	
	====================================================================*/
	UCHAR GetTrapServerInfo( STRUCT_mtnetTrapRcvEntry_mem *ptEntry, UCHAR byEntryNum ) const;

	/*====================================================================
	功能：设置TRAP服务器信息
	参数：STRUCT_mtnetTrapRcvEntry_mem *ptEntry：TRAP服务器信息
          UCHAR byEntryNum ：TRAP服务器结构个数
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL  SetTrapServerInfo( STRUCT_mtnetTrapRcvEntry_mem *ptEntry, UCHAR byEntryNum );


	/*====================================================================
	功能：获取摄象机信息
	参数：STRUCT_mteqpCameraEntry_mem* ptCamera：摄象机信息指针
          UCHAR bySize：摄象机结构个数	
	返回值： 实际取得的摄象机结构个数
	====================================================================*/
	UCHAR GetCameraInfo( STRUCT_mteqpCameraEntry_mem* ptCamera, UCHAR bySize ) const;

	/*====================================================================
	功能：设置摄象机信息
	参数：STRUCT_mteqpCameraEntry_mem* ptCamera：摄象机信息指针
          UCHAR bySize：摄象机结构个数
	返回值：成功返回TRUE，失败返回FALSE
    ====================================================================*/
	BOOL SetCameraInfo( STRUCT_mteqpCameraEntry_mem* ptCamera, UCHAR bySize );

	
	/*====================================================================
	功能：获取音视频矩阵信息
	参数：STRUCT_mteqpMatrixEntry_mem* ptMatrix：Matrix信息指针
          UCHAR bySize：Matrix结构个数
	返回值： 实际取得的Matrix结构个数
	====================================================================*/
	UCHAR GetMatrixInfo( STRUCT_mteqpMatrixEntry_mem* ptMatrix, UCHAR bySize ) const;

	/*====================================================================
	功能：设置音视频矩阵信息
	参数：STRUCT_mteqpMatrixEntry_mem * ptMatrix：Matrix信息指针
          UCHAR bySize：音视频矩阵结构个数
	返回值：成功返回TRUE，失败返回FALSE    
	====================================================================*/
	BOOL SetMatrixInfo( STRUCT_mteqpMatrixEntry_mem * ptMatrix, UCHAR bySize );


	/*====================================================================
	功能：获取网络编码器编号
	参数：无
	返回值：网络编码器编号, 0表示失败
	====================================================================*/
	UCHAR  GetNetEncoderId( ) const;

	/*====================================================================
	功能：设置网络编码器编号
	参数：UCHAR byId：网络编码器编号
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetNetEncoderId ( UCHAR byId );


	/*====================================================================
	功能：获取视频源
	参数：无
	返回值：1: COMP   2: S-VIDEO,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncSource( ) const;

	/*====================================================================
	功能：设置视频源
	参数：UCHAR bySource: 视频源 1: COMP   2: S-VIDEO
	返回值：成功返回TRUE，失败返回FALSE
	====================================================================*/
	BOOL  SetVideoEncSource( UCHAR bySource );


	/*====================================================================
	功能：获取视频制式
	参数：无
	返回值：1: PAL  2: NTSC,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncSystem( ) const;

	/*====================================================================
	功能：设置视频制式
	参数：UCHAR byType: 视频制式 1:PAL  2: NTSC
	返回值：成功返回TRUE，失败返回FALSE
	====================================================================*/
	BOOL  SetVideoEncSystem( UCHAR byType );


	/*====================================================================
	功能：获取视频编码格式
	参数：无
	返回值：1: h2611  2:h263   3:mpeg4 ,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncFormat( ) const;

	/*====================================================================
	功能：设置视频编码格式
	参数：UCHAR byFormat: 视频编码格式 1: h2611  2:h263   3:mpeg4
	返回值：成功返回TRUE，失败返回FALSE
	====================================================================*/
	BOOL  SetVideoEncFormat( UCHAR byFormat );
	

	/*====================================================================
	功能：获取视频编码码率
	参数：无 
	返回值：视频编码码率,  0表示失败
	====================================================================*/
	u32  GetVideoEncBitRate( ) const;

	/*====================================================================
	功能：设置视频编码码率
	参数：DWORD dwRate: 视频编码码率 
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncBitRate( u32 dwRate );


	/*====================================================================
	功能：获取视频分辨率模式
	参数：无
	返回值：视频分辨率模式, 0表示失败  
	====================================================================*/
	UCHAR  GetVideoEncResolution( ) const;

	/*====================================================================
	功能：设置视频分辨率模式: 
	参数：UCHAR byMode: 视频分辨率模式
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoResolution( UCHAR byMode );


	/*====================================================================
	功能：获取视频采集帧率
	参数：无 
	返回值：视频采集帧率,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncFrameRate( ) const;

	/*====================================================================
	功能：设置视频采集帧率 
	参数：UCHAR byRate: 视频采集帧率 
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncFrameRate( UCHAR byRate );


	/*====================================================================
	功能：获取视频压缩最大关键帧间隔
	参数：无 
	返回值：视频压缩最大关键帧间隔,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncIKeyRate( ) const;

	/*====================================================================
	功能：设置视频压缩最大关键帧间隔
	参数：UCHAR byRate: 视频压缩最大关键帧间隔
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncIKeyRate( UCHAR byRate );

	
	/*====================================================================
	功能：获取视频压缩最大量化参数
	参数：无 
	返回值：视频压缩最大量化参数,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncQualMaxValue( ) const;

	/*====================================================================
	功能：设置视频压缩最大量化参数
	参数：UCHAR byValue: 视频压缩压缩最大量化参数
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncQualMaxValue( UCHAR byValue );


	/*====================================================================
	功能：获取视频压缩最小量化参数
	参数：无 
	返回值：视频压缩最小量化参数,  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncQualMinValue( ) const;

	/*====================================================================
	功能：设置视频压缩最小量化参数
	参数：UCHAR byValue: 视频压缩压缩最小量化参数
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncQualMinValue( UCHAR byValue );


	/*====================================================================
	功能：获取视频图象质量
	参数：无 
	返回值：图象质量(1-5),  0表示失败
	====================================================================*/
	UCHAR  GetVideoEncImageQuality( ) const;

	/*====================================================================
	功能：设置视频图象质量
	参数：UCHAR byValue: 视频图象质量
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetVideoEncImageQuality( UCHAR byValue );


	/*====================================================================
	功能：获取音频源
	参数：无 
	返回值：1:Line  2:Mic ,  0表示失败
	====================================================================*/
	UCHAR  GetAudioEncSource( ) const;

	/*====================================================================
	功能：设置音频源 
	参数：UCHAR bySource: 音频源 1:Line  2:Mic 
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetAudioEncSource( UCHAR bySource );


	/*====================================================================
	功能：获取音频编码格式
	参数：无 
	返回值：mp3(1-4)   5:g711u  6:g711a  7:g723  8:g729   9:g722 ,  0表示失败
	====================================================================*/
	UCHAR  GetAudioEncFormat( ) const;

	/*====================================================================
	功能：设置音频编码格式 
	参数：UCHAR byFormat: 音频编码格式 mp3(1-4)   5:g711u  6:g711a  7:g723  8:g729   9:g722 
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetAudioEncFormat( UCHAR byFormat );


	/*====================================================================
	功能：获取编码音量
	参数：无 
	返回值：范围(1-255),  0表示失败
	====================================================================*/
	UCHAR  GetAudioEncVolume( ) const;

	/*====================================================================
	功能：设置音频编码音量 
	参数：UCHAR byVolume: 范围(1-255)
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetAudioEncVolume( UCHAR byVolume );


	/*====================================================================
	功能：获取回声抵消
	参数：无 
	返回值：1 开启  2 关闭 ,  0表示失败
	====================================================================*/
	UCHAR  GetAudioAEC( ) const;

	/*====================================================================
	功能：设置回声抵消支持 
	参数：UCHAR byAec: 1 开启  2 关闭
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetAudioAEC( UCHAR byAec );
	

	/*====================================================================
	功能：获取台标显示开关
	参数：无 
	返回值：1: 显示 2:不显示,  0表示失败
	====================================================================*/
	UCHAR  GetDisplayLabelOnOff( ) const;

	/*====================================================================
	功能：设置台标显示开关 
	参数：UCHAR byMode: 1: 显示 2:不显示
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetDisplayLabelOnOff( UCHAR byMode );

	/*====================================================================
	功能：获取台标显示模式
	参数：无 
	返回值：1-5 ,  0表示失败
	====================================================================*/
	UCHAR  GetDisplayLabelMode( ) const;

	/*====================================================================
	功能：设置台标显示模式 
	参数：UCHAR byMode: 1-5
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetDisplayLabelMode( UCHAR byMode );


	/*====================================================================
	功能：获取画中画显示模式
	参数：无 
	返回值：1:自动开启  2:手动开启,  0表示失败
	====================================================================*/
	UCHAR  GetDisplayPIPMode( ) const;

	/*====================================================================
	功能：设置画中画显示模式 
	参数：UCHAR byMode: 1:自动开启  2:手动开启,
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetDisplayPIPMode( UCHAR byMode );


	/*====================================================================
	功能：获取接受呼叫模式
	参数：无 
	返回值：1:自动 2:手动  3:免打扰 ,  0表示失败
	====================================================================*/
	UCHAR  GetAnswerMode( ) const;

	/*====================================================================
	功能：设置接受呼叫模式 
	参数：UCHAR byMode: 1:自动 2:手动  3:免打扰
	返回值：成功返回TRUE，失败返回FALSE
	====================================================================*/
	BOOL  SetAnswerMode( UCHAR byMode );


	/*====================================================================
	功能：获取呼叫信息
	参数：UCHAR *pbyCallMode,  呼叫方式
          u32 *pdwCallIp, 呼叫的IP(网络序), 当手动呼叫时,该IP无意义
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  GetCallInfo( UCHAR *pbyCallMode,  u32 *pdwCallIp ) const;

	/*====================================================================
	功能：设置呼叫信息
	参数：UCHAR   byCallMode,  呼叫方式
          u32   dwCallIp, 呼叫的IP(网络序), 当手动呼叫时,该IP无意义
	返回值：成功返回TRUE，失败返回FALSE 
	====================================================================*/
	BOOL  SetCallInfo( UCHAR byCallMode,  u32 dwCallIp );

	
	/*====================================================================
    功能：设置重启动的消息号和目的ID号,通知相应的实例
    参数： u16  wRebootEvent：重启动消息号
		   u32 dwNode, 目的节点，0表示不发，缺省为0
    返回值说明：无
    ====================================================================*/
	void SetRebootMsgDst(u16  wRebootEvent, u32 dwNode = 0 );


	/*====================================================================
    功能：设置从待机到运行的消息号和目的ID号, 通知相应的实例
    参数：WORD wRunningEvent ：从待机到运行的消息号
		  u32 dwNode, 目的节点，0表示不发，缺省为0
    返回值说明  ：无
    ====================================================================*/
	void SetRunningMsgDst(u16  wRunningEvent, u32 dwNode=0);


	/*====================================================================
    功能：设置从运行到待机的消息号和目的ID号
				  通知相应的实例
    参数：WORD PowerOffEvent: 从运行到待机消息号
		  u32 dwNode, 目的节点，0表示不发，缺省为0
    返回值说明  ：无
    ====================================================================*/
	void SetPowerOffMsgDst(u16  wPowerOffEvent, u32 dwNode = 0);
	
	
    BOOL InitConfig( void );

    CMtAgent();
    virtual ~CMtAgent();

protected:
	BOOL UpdateConfigVerion( );
};

class IMtAgent : public CInstance  
{
public:
	/*====================================================================
    功能        ：从告警列表中增加相应的告警信息
    输入参数说明：DWORD dwAlarmCode, 告警码
                  UCHAR byObjType, 对象类型
                  UCHAR byObject[], 对象
                  STRUCT_mtpfmAlarmEntry *ptData, 返回到告警信息
    返回值说明  ：删除成功返回TRUE，反之返回FALSE
	----------------------------------------------------------------------*/
    BOOL AddAlarm( u32 dwAlarmCode, UCHAR byObjType, UCHAR byObject[], STRUCT_mtpfmAlarmEntry *ptData );

	/*====================================================================
    功能        ：从告警列表中删除相应的告警信息
    输入参数说明：DWORD dwSerialNo, 指定的告警索引
    返回值说明  ：删除成功返回TRUE，反之返回FALSE
	====================================================================*/
    BOOL DeleteAlarm( u32 dwSerialNo );

	/*====================================================================
    功能        ：从告警列表中获取相应的告警信息
    输入参数说明：DWORD dwAlarmCode, 指定的告警码
                  UCHAR byObjType, 指定的告警对象类型
                  UCHAR byObject[], 指定的告警对象
                  STRUCT_mtpfmAlarmEntry *ptData, 返回的告警信息指针
    返回值说明  ：存在返回TRUE，反之返回FALSE
	====================================================================*/
    BOOL FindAlarm( u32 dwAlarmCode, UCHAR byObjType, UCHAR byObject[], 
               STRUCT_mtpfmAlarmEntry *ptData );

	/*====================================================================
    功能        ：实例消息处理入口函数，必须override
    输入参数说明：CMessage * const pcMsg, 传入的消息
    返回值说明  ：
	====================================================================*/
	virtual void InstanceEntry( CMessage* const pcMsg );

	IMtAgent();
	virtual ~IMtAgent();

protected:
	void ProcE1StatusChange( CMessage * const pcMsg );
	void ProcMediaStreamStatusChange( CMessage * const pcMsg );
	void ProcVideoSourceStatusChange( CMessage * const pcMsg );
	void ProcSoftwareStatusChange( CMessage * const pcMsg );
	void ProcMAPStatusChange( CMessage * const pcMsg );
	void ProcEthernetCardStatusChange( CMessage * const pcMsg );
	void ProcCCIStatusChange( CMessage * const pcMsg );
	void ProcFanStatusChange( CMessage * const pcMsg );
	void ProcV35StatusChange( CMessage * const pcMsg );
	void ProcPowerOnOffStatusChange( CMessage * const pcMsg );
};

typedef zTemplate<IMtAgent, 1, CMtAgent> CMtAgentApp;

extern CMtAgentApp g_cMtAgent;


#endif // !defined(AFX_MTAGENT_H__E7FBF7B5_F532_4778_98CF_6649D58F5914__INCLUDED_)
